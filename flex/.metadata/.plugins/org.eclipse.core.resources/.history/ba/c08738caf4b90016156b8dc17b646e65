<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" layout="absolute" width="100%" height="100%" applicationComplete="init()"
    color="#FFFFFF" backgroundColor="#000000" horizontalScrollPolicy="off" verticalScrollPolicy="off" frameRate="120">

    <fx:Script>
        <![CDATA[
            import aston.*;

            import com.greensock.*;
            import com.greensock.easing.*;
            import com.greensock.events.WatermarkEvent;
            import com.greensock.loading.*;
            import com.greensock.loading.display.*;
            import com.greensock.plugins.AutoAlphaPlugin;
            import com.greensock.plugins.TweenPlugin;

            import flash.utils.setTimeout;

            import fx.*;

            import mx.containers.*;
            import mx.controls.*;
            import mx.core.*;
            import mx.effects.*;
            import mx.utils.ObjectUtil;

            import text.*;

            private var project:Object = {};

            private var playerTL:TimelineMax;

            private var app:UIComponent;

            private var frames:Array;

            private var style:Object;

            private var settings:Object;

            private var music:MP3Loader;

            protected function init():void {
                app = FlexGlobals.topLevelApplication.document;
                playerTL = new TimelineMax({ paused: true, onUpdate: app.validateNow, onComplete: movieDone });
                LoaderMax.contentDisplayClass = FlexContentDisplay;
                TweenPlugin.activate([ AutoAlphaPlugin ]);

                if (app === this) {
                    new LoaderMaxEx().test('http://www.buzzvid.com/members/projects/data/2', play);
                }
            }

            public function play(project:Object):void {
                style = project.style || {};
                frames = project.item.list;
                settings = project.settings || {};

                var countdown:Boolean = style && style.countup ? false : true;

                if (style.sound) {
                    music = LoaderMax.getLoader(style.sound);

                    if (music) {
                        music.volume = style.volume > 1 ? style.volume / 100 : (style.volume > 0 ? style.volume : 0.3);
                        music.vars.repeat = -1;
                        playerTL.call(music.playSound);
                    }
                }

                if (settings.showIntro && settings.introItem && settings.introItem.name) {
                    playerTL.add(createFrame(settings.introItem, -1));
                }

                for (var a:int = 0; a < frames.length; a++) {
                    var i:uint = countdown ? (frames.length - 1) - a : a;
                    var frame:Object = frames[i];
                    var frameTL:TimelineMax = this.createFrame(frame, i);

                    playerTL.add(frameTL);
                }

                if (settings.showGoodbye && settings.goodbyeItem && settings.goodbyeItem.name) {
                    playerTL.add(createFrame(settings.goodbyeItem, -1));
                }

                if (style.watermark) {
                    app.dispatchEvent(new WatermarkEvent("addWatermark", false, false, style.watermark));
                }

                if (music) {
                    playerTL.to(music, 1, { volume: 0 }, "-=1");
                }

                playerTL.play();
            }

            private function createFrame(frame:Object, index:int = 0):TimelineMax {
                var items:Array = frame.media && frame.media.sources ? frame.media.sources : [];
                var frameLength:uint = 2;
                var frameTL:TimelineMax = new TimelineMax({ paused: false });

                if (frame.voice && frame.voice.audio) {
                    var snd:MP3Loader = LoaderMax.getLoader(frame.voice.audio);

                    if (snd) {
                        frameLength = Math.max(frameLength, Math.ceil(snd.duration));
                        frameTL.call(function(s:MP3Loader):void {
                            s.volume = 1;
                            s.gotoSoundTime(0, true);
                        }, [ snd ]);
                    }
                }

                if (frame.name && (!style.hideCountdown || !items.length)) {
                    items.unshift({ text: frame.name, heading: index !== -1 ? (index + 1) : '', bgURL: style.bg, sfx: style.defaultSfx });
                }

                for (var j:int = 0; j < items.length; j++) {
                    var item:Object = items[j];
                    var itemTLs:Array = [];

                    if (item.url) {
                        var url:String = /youtube/.test(item.url) ? 'https://s3.amazonaws.com/www.svift.io/up.mp4' : item.url;
                        var loader:* = LoaderMax.getLoader(url);
                        var child:* = loader is ImageLoader ? new LoaderMaxEx().getScaledImage(url, width, height, true) : loader ? loader.content : null;

                        if (child) {
                            var playTL:TimelineMax = createTimeLine(itemTLs);
                            var fadeInDuration:Number = 0.25;
                            var fadeOutDuration:Number = 0.25;

                            if (child is DisplayObject) {
                                main.addChild(child);
                                child.alpha = 0;
                                playTL.to(child, fadeInDuration, { alpha: 1 });

                                if (loader is ImageLoader) {
                                    playTL.to(child, 5, { z: -40, ease: Linear.easeOut });
                                    playTL.to(child, fadeOutDuration, { autoAlpha: 0 });
                                } else if (loader is VideoLoader) {
                                    var fadeMusic:Boolean = item.fadeMusic;

                                    if (fadeMusic) {
                                        playTL.to(music, 0.1, { volume: 0 });
                                    }

                                    playTL.call(loader.gotoVideoTime, [loader.vars.start || 0, true]);
                                    playTL.to(child, fadeOutDuration, { autoAlpha: 0, delay: loader.duration });

                                    if (fadeMusic) {
                                        playTL.to(music, 0.1, { volume: music.volume });
                                    }
                                } else {
                                    playTL.to(child, fadeOutDuration, { autoAlpha: 0 });
                                }
                            }
                        } else {
                            trace("Loader failed: ", url);
                        }
                    } else if (item.text) {
                        var textItem:Playable = createPlayable(getTextClass(style.textFX), item.text, item.heading);
                        var textTL:TimelineMax = createTimeLine(itemTLs);
                        var textBackground:String = item.bgURL || style.bg;
                        var textDuration:int = 3;
                        var innerText:UIComponent = textItem.getInnerContent();

                        SimpleText(textItem).bgURL = textBackground;
                        textTL.call(farOut, [ innerText, 100 ]);
                        textTL.call(playPlayable, [ textItem, textDuration ]);
                        textTL.to(innerText, textDuration + 2, { z: 0, ease: Linear.easeOut });
                        textTL.call(textItem.hide, [ 0.5 ]);
                        textTL.to(textItem, fadeOutDuration, { autoAlpha: 0 }, "+=0.5");
                    }

                    if (playTL && (item.captionTitle || item.captionText)) {
                        var videoTitle:String = ((index !== -1 ? '# ' + (index + 1) : '') + (frame.name ? ('. ' + frame.name) : ''));
                        var caption:Playable = createPlayable(getAstonClass(style.aston), item.captionTitle || videoTitle, item.captionText);
                        var captionTL:TimelineMax = createTimeLine(itemTLs);

                        captionTL.call(playPlayable, [ caption, 1 ], "+=0.5");
                        captionTL.call(caption.reverse, null, "+=" + Math.max(3, Math.min(5, playTL.duration() - 2)));
                    }

                    if (item.sfx) {
                        var sfx:MP3Loader = LoaderMax.getLoader(item.sfx);

                        if (sfx) {
                            var sfxTL:TimelineMax = createTimeLine(itemTLs);

                            sfxTL.call(function(s:MP3Loader):void {
                                s.volume = 0.6;
                                s.gotoSoundTime(0, true);
                            }, [ sfx ]);
                        }
                    }

                    frameTL.add(itemTLs, "+=0", "start");
                }

                frameTL.duration(Math.max(frameTL.duration(), frameLength));

                return frameTL;
            }

            public function stop():void {
                playerTL.stop();
            }

            private function createPlayable(cls:Class, title:String, subTitle:String):Playable {
                var inst:Playable = new cls() as Playable;
                inst.title = title;
                inst.subTitle = subTitle;
                inst.alpha = 0;

                return this.addChild(inst) as Playable;
            }

            private function createTimeLine(itemTLs:Array):TimelineMax {
                var newTL:TimelineMax = new TimelineMax({ paused: false });
                itemTLs.push(newTL);
                return newTL;
            }

            private function playPlayable(playable:Playable, duration:int = 2):void {
                bringToFront(playable);
                playable.width = width;
                playable.height = height;
                playable.alpha = 1;
                playable.totalDuration = duration;
                playable.playWhenReady();
            }

            private function bringToFront(child:UIComponent):void {
                var theParent:Container = child.parent as Container;
                if (theParent) {
                    theParent.setChildIndex(child, theParent.numChildren - 1);
                }
            }

            private function getAstonClass(name:String):Class {
                var map:Object = { AstonClean: AstonClean, AstonStack: AstonStack, AstonFiller: AstonFiller, AstonRise: AstonRise, AstonSquare: AstonSquare };

                return map.hasOwnProperty(name) ? map[name] : AstonStack;
            }

            private function getTextClass(name:String):Class {
                var map:Object = { SequenceText: SequenceText, SlideText: SlideText, RotateText: RotateText, CountdownText: CountdownText, SimpleFade: SimpleFade, TypewriterText: TypewriterText };

                return map.hasOwnProperty(name) ? map[name] : SequenceText;
            }

            private function movieDone():void {
                app.dispatchEvent(new Event("movieDone"));
            }

            private function farOut(target:UIComponent, back:int = 30):void {
                target.z = back;
            }
        ]]>
    </fx:Script>

    <mx:Canvas id="main" width="100%" height="100%" clipContent="true" horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
</mx:Application>
