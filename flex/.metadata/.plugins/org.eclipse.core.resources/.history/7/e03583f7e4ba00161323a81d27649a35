package com.greensock.loading.display {
    import flash.display.DisplayObject;
    import flash.events.Event;
    import flash.system.Security;

    import mx.controls.VideoDisplay;
    import mx.events.VideoEvent;

    import mx.controls.videoClasses.VideoPlayer;

    public class YoutubePlayer extends VideoDisplay {
        public var buffer:int = 1;

        public var end:int = -1;

        public var start:int = 0;

        public var videoURL:String = '';

        public var vol:Number = 100;

        private var ready:Boolean = false;

        private var inited:Boolean = false;

        private var active:Boolean = false;

        public function YoutubePlayer() {
            super();

            width = 854;
            height = 480;
            alpha = 0;
            volume = 0;
            autoPlay = true;
            maintainAspectRatio = true;

            Security.allowDomain("*");
            Security.allowInsecureDomain("*");

            this.addEventListener(VideoEvent.PLAYHEAD_UPDATE, updatePlayer);
        }

        public function loadVideo():void {
            this.ready = false;
            this.source = 'http://www.stockutils.com/get-youtube-url?id=Q3xktII_PVY'; // this.videoURL;

            trace('loading started: http://www.stockutils.com/get-youtube-url?id=Q3xktII_PVY');
        }

        public function playVideo():void {
            if (this.ready) {
                trace('playing video..');
                active = true;
                this.play();
            } else {
                callLater(playVideo);
            }
        }

        protected function updatePlayer(event:VideoEvent):void {
            var time:Number = event.playheadTime;

            if (playing && time > 0) {
                trace("play head:", event.playheadTime);

                if (!inited) {
                    inited = true;
                    this.end = Math.min(this.end || 300, this.totalTime || 300);
                    this.playheadTime = Math.max(this.end - 1, 0);
                    trace("start / end: ", this.start, this.end, this.totalTime);
                } else {
                    if (!ready && Math.ceil(event.playheadTime) >= this.end) {
                        ready = true;
                        this.pause();
                        this.playheadTime = this.start;
                        this.volume = vol;
                        dispatchEvent(new Event(Event.COMPLETE));
                    } else if (Math.ceil(event.playheadTime) >= this.end) {
                        trace('video pause...');
                        pause();
                    }
                }
            }
        }

        override public function addChild(child:DisplayObject):DisplayObject {
            var video:VideoPlayer = VideoPlayer(child);
            video.smoothing = true;

            return super.addChild(child);
        }
    }
}
